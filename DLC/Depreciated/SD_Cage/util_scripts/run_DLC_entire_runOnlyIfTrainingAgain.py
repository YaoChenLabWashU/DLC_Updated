# IMPORTANT: This is the file used to run DLC from scratch. It will train the model again.
# ONLY RUN IF YOU ARE TRAINING THE MODEL AGAIN.
# IF YOU ARE ONLY ANALYZING NEW VIDEOS, use run_DLC_process_videos.py

'''
set the config file path in your root directory 
(this is the config file generated by DLC locally 
when you create your project)
'''

# docstring: https://github.com/DeepLabCut/DeepLabCut/wiki/DOCSTRINGS 

#Setup your project variables:
# PLEASE EDIT THESE:
  
ProjectFolderName = '/storage1/fs1/yaochen/Active/DLC/SD_Cage'
VideoType = 'mp4' 

#don't edit these:
videofile_path = [ProjectFolderName+'/Testing/'] #Enter the list of videos or folder to analyze.
print("Video Path: ", videofile_path)

#This creates a path variable that links to your google drive copy
#No need to edit this, as you set it up before: 
path_config_file = ProjectFolderName+'/config.yaml'
print("Config file path: ",path_config_file)

import deeplabcut
deeplabcut.__version__

# Creating a training dataset
print("----- Creating training dataset -----")
#Then, run this cell. There are many more functions you can set here, including which netowkr to use!
#check the docstring for full options you can do!

deeplabcut.create_training_dataset(path_config_file, net_type='resnet_50', augmenter_type='imgaug')

print("----- Training dataset built correctly :) ------")

# Start Training
print("----- Training begins -----")

#let's also change the display and save_iters just in case Colab takes away the GPU... 
#if that happens, you can reload from a saved point. Typically, you want to train to 200,000 + iterations.
#more info and there are more things you can set: https://github.com/DeepLabCut/DeepLabCut/wiki/DOCSTRINGS#train_network

deeplabcut.train_network(path_config_file, shuffle=1, displayiters=1000,saveiters=50000, maxiters = 1030000, allow_growth=False)

#this will run until you stop it (CTRL+C), or hit "STOP" icon, or when it hits the end (default, 1.03M iterations). 
#Whichever you chose, you will see what looks like an error message, but it's not an error - don't worry....

print("----- Training done!! :) -----")

# Start evaluating
# this function evaluates a trained model for a specific shuffle/shuffles at a particular state or all the states on the data set 
# and stores the results as .csv file in a subdirectory under evaluation-results.
print("----- Evaluating begins -----")

%matplotlib notebook
deeplabcut.evaluate_network(path_config_file,plotting=True)

# Here you want to see a low pixel error! Of course, it can only be as good as the labeler, 
#so be sure your labels are good! (And you have trained enough ;)

print("----- Evaluation done!! :) -----")

# Start analyzing videos
'''
This function analyzes the new video. The user can choose the best model from the evaluation results and specify the correct snapshot index.
(We don't really need this since I have tested the model already)
'''
print("----- Analyzing videos -----")

deeplabcut.analyze_videos(path_config_file,videofile_path, videotype=VideoType, save_as_csv = True)

print("----- Analyzing done!! -----")

# plotting trajectories. 
print("----- Plotting trajectories begin!! -----")
deeplabcut.plot_trajectories(path_config_file,videofile_path, videotype=VideoType)
print("----- Plotting trajectories done!! :) -----")

# Create labeled videos
'''
This function is for visualiztion purpose and can be used to create a video in .mp4 
format with labels predicted by the network. This video is saved in the same directory 
where the original video resides. 
'''
print("----- Creating labeled videos begins -----")
deeplabcut.create_labeled_video(path_config_file,videofile_path, videotype=VideoType)
print("----- Done creating labeled videos!! :)) -----")

# Extract Outlier frames
print("----- Extracting outlier frames -----")
#Get outlier frames
deeplabcut.extract_outlier_frames(path_config_file, videofile_path, videotype=VideoType, shuffle=1, trainingsetindex=0, outlieralgorithm='jump', 
comparisonbodyparts='all', epsilon=20, p_bound=0.01, ARdegree=3, MAdegree=1, alpha=0.01, extractionalgorithm='kmeans', automatic=True)
print("----- Done extracting outlier frames!! :)) -----")

print(" -------------------- DLC Process Done! --------------------")

